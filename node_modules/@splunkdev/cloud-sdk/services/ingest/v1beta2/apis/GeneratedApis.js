"use strict";
// tslint:disable
/**
 * Copyright 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Ingest API
 * Use the Ingest service in Splunk Cloud Services to send event and metrics data, or upload a static file, to Splunk Cloud Services.
 *
 * OpenAPI spec version: v1beta2.32 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var form_data_1 = __importDefault(require("form-data"));
var fs_1 = require("fs");
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var ingest_1 = require("../../../../service_extensions/ingest");
var client_1 = require("../../../../client");
exports.INGEST_SERVICE_PREFIX = '/ingest/v1beta2';
exports.INGEST_SERVICE_CLUSTER = 'api';
/**
 * Ingest API
 * Version: v1beta2.32
 * Use the Ingest service in Splunk Cloud Services to send event and metrics data, or upload a static file, to Splunk Cloud Services.
 */
var GeneratedIngestService = /** @class */ (function (_super) {
    __extends(GeneratedIngestService, _super);
    function GeneratedIngestService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Delete All dsphec tokens for a given tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return { [key: string]: any; }
         */
        _this.deleteAllCollectorTokens = function (args, requestStatusCallback) {
            var path = "/ingest/v1beta2/collector/tokens";
            return _this.client["delete"](exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete dsphec token by name.
         * @param tokenName
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return { [key: string]: any; }
         */
        _this.deleteCollectorToken = function (tokenName, args, requestStatusCallback) {
            var path_params = {
                tokenName: tokenName
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/ingest/v1beta2/collector/tokens/", ""], ["/ingest/v1beta2/collector/tokens/", ""])), 'tokenName')(path_params);
            return _this.client["delete"](exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get the metadata of a dsphec token by name.
         * @param tokenName
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return HECTokenAccessResponse
         */
        _this.getCollectorToken = function (tokenName, args, requestStatusCallback) {
            var path_params = {
                tokenName: tokenName
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/ingest/v1beta2/collector/tokens/", ""], ["/ingest/v1beta2/collector/tokens/", ""])), 'tokenName')(path_params);
            return _this.client.get(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * List dsphec tokens for a tenant.
         * @param args parameters to be sent with the request
         * @param args.limit
         * @param args.offset
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<HECTokenAccessResponse>
         */
        _this.listCollectorTokens = function (args, requestStatusCallback) {
            var path = "/ingest/v1beta2/collector/tokens";
            return _this.client.get(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates dsphec tokens.
         * @param hECTokenCreateRequest The API request schema for the token.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return HECTokenCreateResponse
         */
        _this.postCollectorTokens = function (hECTokenCreateRequest, args, requestStatusCallback) {
            var path = "/ingest/v1beta2/collector/tokens";
            return _this.client.post(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), hECTokenCreateRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Sends events.
         * @param event
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return HTTPResponse
         */
        _this.postEvents = function (event, args, requestStatusCallback) {
            if (!event) {
                throw new client_1.SplunkError({ message: "Bad Request: event is empty or undefined" });
            }
            var path = "/ingest/v1beta2/events";
            return _this.client.post(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), event, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Sends metric events.
         * @param metricEvent
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return HTTPResponse
         */
        _this.postMetrics = function (metricEvent, args, requestStatusCallback) {
            if (!metricEvent) {
                throw new client_1.SplunkError({ message: "Bad Request: metricEvent is empty or undefined" });
            }
            var path = "/ingest/v1beta2/metrics";
            return _this.client.post(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), metricEvent, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the metadata of a dsphec token by name.
         * @param tokenName
         * @param hECTokenUpdateRequest The API request schema for the token.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return HECTokenAccessResponse
         */
        _this.putCollectorToken = function (tokenName, hECTokenUpdateRequest, args, requestStatusCallback) {
            var path_params = {
                tokenName: tokenName
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/ingest/v1beta2/collector/tokens/", ""], ["/ingest/v1beta2/collector/tokens/", ""])), 'tokenName')(path_params);
            return _this.client.put(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), hECTokenUpdateRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Upload a CSV or text file that contains events. The file limit is 1MB or an error is returned.
         * @param fileName file to be uploaded
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return UploadSuccessResponse
         */
        _this.uploadFiles = function (fileName, args, requestStatusCallback) {
            var path = "/ingest/v1beta2/files";
            var formData = new form_data_1["default"]();
            var readStream = fs_1.createReadStream(fileName);
            formData.append("upfile", readStream);
            var formHeaders = formData.getHeaders();
            return _this.client.post(exports.INGEST_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), formData, { query: args, headers: formHeaders, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedIngestService.prototype.getServiceCluster = function () {
        return exports.INGEST_SERVICE_CLUSTER;
    };
    GeneratedIngestService.prototype.getServicePrefix = function () {
        return exports.INGEST_SERVICE_PREFIX;
    };
    return GeneratedIngestService;
}(baseapiservice_1["default"]));
exports.GeneratedIngestService = GeneratedIngestService;
exports.IngestService = ingest_1.IngestServiceExtensions(GeneratedIngestService);
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=GeneratedApis.js.map