/**
 * Copyright 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Ingest API
 * Use the Ingest service in Splunk Cloud Services to send event and metrics data, or upload a static file, to Splunk Cloud Services.
 *
 * OpenAPI spec version: v1beta2.32 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Event, HECTokenAccessResponse, HECTokenCreateRequest, HECTokenCreateResponse, HECTokenUpdateRequest, HTTPResponse, MetricEvent, UploadSuccessResponse } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { IngestServiceExtensions } from "../../../../service_extensions/ingest";
import { RequestStatus } from '../../../../client';
export declare const INGEST_SERVICE_PREFIX: string;
export declare const INGEST_SERVICE_CLUSTER: string;
/**
 * Ingest API
 * Version: v1beta2.32
 * Use the Ingest service in Splunk Cloud Services to send event and metrics data, or upload a static file, to Splunk Cloud Services.
 */
export declare class GeneratedIngestService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Delete All dsphec tokens for a given tenant.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return { [key: string]: any; }
     */
    deleteAllCollectorTokens: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: any;
    }>;
    /**
     * Delete dsphec token by name.
     * @param tokenName
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return { [key: string]: any; }
     */
    deleteCollectorToken: (tokenName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: any;
    }>;
    /**
     * Get the metadata of a dsphec token by name.
     * @param tokenName
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return HECTokenAccessResponse
     */
    getCollectorToken: (tokenName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<HECTokenAccessResponse>;
    /**
     * List dsphec tokens for a tenant.
     * @param args parameters to be sent with the request
     * @param args.limit
     * @param args.offset
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<HECTokenAccessResponse>
     */
    listCollectorTokens: (args?: {
        [key: string]: any;
        limit?: number | undefined;
        offset?: number | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<HECTokenAccessResponse[]>;
    /**
     * Creates dsphec tokens.
     * @param hECTokenCreateRequest The API request schema for the token.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return HECTokenCreateResponse
     */
    postCollectorTokens: (hECTokenCreateRequest: HECTokenCreateRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<HECTokenCreateResponse>;
    /**
     * Sends events.
     * @param event
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return HTTPResponse
     */
    postEvents: (event?: Event[] | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<HTTPResponse>;
    /**
     * Sends metric events.
     * @param metricEvent
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return HTTPResponse
     */
    postMetrics: (metricEvent?: MetricEvent[] | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<HTTPResponse>;
    /**
     * Update the metadata of a dsphec token by name.
     * @param tokenName
     * @param hECTokenUpdateRequest The API request schema for the token.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return HECTokenAccessResponse
     */
    putCollectorToken: (tokenName: string, hECTokenUpdateRequest: HECTokenUpdateRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<HECTokenAccessResponse>;
    /**
     * Upload a CSV or text file that contains events. The file limit is 1MB or an error is returned.
     * @param fileName file to be uploaded
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UploadSuccessResponse
     */
    uploadFiles: (fileName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UploadSuccessResponse>;
}
export declare type IngestService = GeneratedIngestService & IngestServiceExtensions;
export declare const IngestService: typeof GeneratedIngestService;
