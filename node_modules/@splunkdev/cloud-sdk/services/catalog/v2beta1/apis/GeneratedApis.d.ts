/**
 * Copyright 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Search Catalog service
 * With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
 *
 * OpenAPI spec version: v2beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Action, ActionPATCH, ActionPOST, Annotation, AnnotationPOST, Dashboard, DashboardPATCH, DashboardPOST, Dataset, DatasetGet, DatasetImportedBy, DatasetPATCH, DatasetPOST, Field, FieldPATCH, FieldPOST, Module, Relationship, RelationshipPATCH, RelationshipPOST, Rule, RulePATCH, RulePOST } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { CatalogServiceExtensions } from "../../../../service_extensions/catalog";
import { RequestStatus } from '../../../../client';
export declare const CATALOG_SERVICE_PREFIX: string;
export declare const CATALOG_SERVICE_CLUSTER: string;
/**
 * Search Catalog service
 * Version: v2beta1.4
 * With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
 */
export declare class GeneratedCatalogService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Creates a new action for the specified rule by rule id or resource name.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionPOST The JSON representation of the action to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    createActionForRule: (ruleresource: string, actionPOST: ActionPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Creates a new annotation for the specified dashboard.
     * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param annotationPOST The JSON representation of the annotation to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Annotation
     */
    createAnnotationForDashboard: (dashboardresource: string, annotationPOST: AnnotationPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation>;
    /**
     * Creates a new annotation for the specified dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param annotationPOST The JSON representation of the annotation to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Annotation
     */
    createAnnotationForDataset: (datasetresource: string, annotationPOST: AnnotationPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation>;
    /**
     * Creates a new dashboard.
     * @param dashboardPOST The JSON representation of the Dashboard to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    createDashboard: (dashboardPOST: DashboardPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Creates a new dataset.
     * @param datasetPOST JSON representation of the DatasetInfo to be persisted
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    createDataset: (datasetPOST: DatasetPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Creates a new dataset import using the ID or resource name of the imported dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetImportedBy
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return DatasetImportedBy
     */
    createDatasetImport: (datasetresource: string, datasetImportedBy?: DatasetImportedBy | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DatasetImportedBy>;
    /**
     * Adds a new field to the dataset with the specified ID or resource name.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldPOST The JSON representation of the field to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    createFieldForDataset: (datasetresource: string, fieldPOST: FieldPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Creates a new relationship.
     * @param relationshipPOST The JSON representation of the relationship to persist.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Relationship
     */
    createRelationship: (relationshipPOST: RelationshipPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship>;
    /**
     * Creates a new rule.
     * @param rulePOST The JSON representation of the rule to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    createRule: (rulePOST: RulePOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Deletes the action with the specified ID that is associated with the specified rule.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteActionByIdForRule: (ruleresource: string, actionid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
     * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param annotationid ID of a annotation.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAnnotationOfDashboard: (dashboardresource: string, annotationid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the annotation with the specified ID that is associated with the specified dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param annotationid ID of a annotation.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAnnotationOfDataset: (datasetresource: string, annotationid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the dashboard with the specified ID or resource name.
     * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteDashboard: (dashboardresource: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteDataset: (datasetresource: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the field with the specified ID that is part of the specified dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteFieldByIdForDataset: (datasetresource: string, fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
     * @param relationshipid ID of a relationship.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRelationshipById: (relationshipid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRule: (ruleresource: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns information about the action with the specified ID that is associated with the specified rule.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    getActionByIdForRule: (ruleresource: string, actionid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Returns information about the dashboard with the specified ID or resource name.
     * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    getDashboard: (dashboardresource: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return DatasetGet
     */
    getDataset: (datasetresource: string, args?: {
        [key: string]: any;
        maxstale?: number | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DatasetGet>;
    /**
     * Returns the field with the specified ID.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    getFieldById: (fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Returns the field with the specified ID that is part of the specified dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    getFieldByIdForDataset: (datasetresource: string, fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Returns the relationship with the specified relationship ID.
     * @param relationshipid ID of a relationship.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Relationship
     */
    getRelationshipById: (relationshipid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship>;
    /**
     * Returns information about rule with the specified rule ID or resource name.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    getRule: (ruleresource: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Creates a new dataset import using the ID or resource name of the imported dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetImportedBy
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return DatasetImportedBy
     */
    importDataset: (datasetresource: string, datasetImportedBy?: DatasetImportedBy | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DatasetImportedBy>;
    /**
     * Returns the set of actions that are part of the specified rule.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Action>
     */
    listActionsForRule: (ruleresource: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action[]>;
    /**
     * Returns the set of annotations across all objects.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotations: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Returns the set of annotations that are associated with the specified dashboard.
     * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param args parameters to be sent with the request
     * @param args.filter A filter query to apply to the annotations.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotationsForDashboard: (dashboardresource: string, args?: {
        [key: string]: any;
        filter?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Returns the set of annotations that are associated with the specified dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotationsForDataset: (datasetresource: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Returns a list of dashboards.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Dashboard>
     */
    listDashboards: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard[]>;
    /**
     * Returns a list of all datasets. Use a filter to return a specific list of datasets.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the dataset list. The filter must be a SPL predicate expression.
     * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
     * @param args.offset The number of results to skip before the first result is returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc\".  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<DatasetGet>
     */
    listDatasets: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        maxstale?: number | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DatasetGet[]>;
    /**
     * Returns a list of all of the fields in the Metadata Catalog.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the dataset list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Field>
     */
    listFields: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field[]>;
    /**
     * Returns the set of fields for the dataset with the specified ID or resource name.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the dataset list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by. You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Field>
     */
    listFieldsForDataset: (datasetresource: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field[]>;
    /**
     * Returns a list of all modules. Use a filter to return a specific list of modules.
     * @param args parameters to be sent with the request
     * @param args.filter A filter to apply to the modules.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Module>
     */
    listModules: (args?: {
        [key: string]: any;
        filter?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Module[]>;
    /**
     * Returns a list of all relationships. Use a filter to return a specific list of relationships.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Relationship>
     */
    listRelationships: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship[]>;
    /**
     * Returns a list of rules that match a filter, if specified, otherwise returns all rules.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Rule>
     */
    listRules: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule[]>;
    /**
     * Modifies the action with the specified ID that is associated with the specified rule.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param actionPATCH The properties to update in the specified action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    updateActionByIdForRule: (ruleresource: string, actionid: string, actionPATCH: ActionPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Modifies the dashboard with the specified ID or resource name.
     * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param dashboardPATCH An updated representation of the dashboard to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    updateDashboard: (dashboardresource: string, dashboardPATCH: DashboardPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetPATCH An updated representation of the dataset to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    updateDataset: (datasetresource: string, datasetPATCH: DatasetPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Modifies the field with the specified ID that is part of the specified dataset.
     * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param fieldPATCH The properties to update in the specified field, or the requesting user lacks catalog.datasets.read permission for them.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    updateFieldByIdForDataset: (datasetresource: string, fieldid: string, fieldPATCH: FieldPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Modifies the relationship with the specified relationship ID.
     * @param relationshipid ID of a relationship.
     * @param relationshipPATCH The properties to update in the specified relationship.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Relationship
     */
    updateRelationshipById: (relationshipid: string, relationshipPATCH: RelationshipPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship>;
    /**
     * Modifies the rule with the specified rule ID or resource name.
     * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param rulePATCH The properties to update in the specified rule.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    updateRule: (ruleresource: string, rulePATCH: RulePATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
}
export declare type CatalogService = GeneratedCatalogService & CatalogServiceExtensions;
export declare const CatalogService: typeof GeneratedCatalogService;
