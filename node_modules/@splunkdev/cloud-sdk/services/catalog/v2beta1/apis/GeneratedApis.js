"use strict";
// tslint:disable
/**
 * Copyright 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Search Catalog service
 * With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
 *
 * OpenAPI spec version: v2beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var catalog_1 = require("../../../../service_extensions/catalog");
var client_1 = require("../../../../client");
exports.CATALOG_SERVICE_PREFIX = '/catalog/v2beta1';
exports.CATALOG_SERVICE_CLUSTER = 'api';
/**
 * Search Catalog service
 * Version: v2beta1.4
 * With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
 */
var GeneratedCatalogService = /** @class */ (function (_super) {
    __extends(GeneratedCatalogService, _super);
    function GeneratedCatalogService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates a new action for the specified rule by rule id or resource name.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionPOST The JSON representation of the action to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.createActionForRule = function (ruleresource, actionPOST, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/catalog/v2beta1/rules/", "/actions"], ["/catalog/v2beta1/rules/", "/actions"])), 'ruleresource')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new annotation for the specified dashboard.
         * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param annotationPOST The JSON representation of the annotation to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Annotation
         */
        _this.createAnnotationForDashboard = function (dashboardresource, annotationPOST, args, requestStatusCallback) {
            var path_params = {
                dashboardresource: dashboardresource
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/catalog/v2beta1/dashboards/", "/annotations"], ["/catalog/v2beta1/dashboards/", "/annotations"])), 'dashboardresource')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), annotationPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new annotation for the specified dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param annotationPOST The JSON representation of the annotation to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Annotation
         */
        _this.createAnnotationForDataset = function (datasetresource, annotationPOST, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/annotations"], ["/catalog/v2beta1/datasets/", "/annotations"])), 'datasetresource')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), annotationPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new dashboard.
         * @param dashboardPOST The JSON representation of the Dashboard to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.createDashboard = function (dashboardPOST, args, requestStatusCallback) {
            var path = "/catalog/v2beta1/dashboards";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dashboardPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new dataset.
         * @param datasetPOST JSON representation of the DatasetInfo to be persisted
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.createDataset = function (datasetPOST, args, requestStatusCallback) {
            var path = "/catalog/v2beta1/datasets";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new dataset import using the ID or resource name of the imported dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetImportedBy
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DatasetImportedBy
         */
        _this.createDatasetImport = function (datasetresource, datasetImportedBy, args, requestStatusCallback) {
            if (!datasetImportedBy) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetImportedBy is empty or undefined" });
            }
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/imported-by"], ["/catalog/v2beta1/datasets/", "/imported-by"])), 'datasetresource')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Adds a new field to the dataset with the specified ID or resource name.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldPOST The JSON representation of the field to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.createFieldForDataset = function (datasetresource, fieldPOST, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/fields"], ["/catalog/v2beta1/datasets/", "/fields"])), 'datasetresource')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), fieldPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new relationship.
         * @param relationshipPOST The JSON representation of the relationship to persist.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Relationship
         */
        _this.createRelationship = function (relationshipPOST, args, requestStatusCallback) {
            var path = "/catalog/v2beta1/relationships";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), relationshipPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new rule.
         * @param rulePOST The JSON representation of the rule to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.createRule = function (rulePOST, args, requestStatusCallback) {
            var path = "/catalog/v2beta1/rules";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), rulePOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the action with the specified ID that is associated with the specified rule.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionid ID of an Action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteActionByIdForRule = function (ruleresource, actionid, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource,
                actionid: actionid
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/catalog/v2beta1/rules/", "/actions/", ""], ["/catalog/v2beta1/rules/", "/actions/", ""])), 'ruleresource', 'actionid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
         * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param annotationid ID of a annotation.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAnnotationOfDashboard = function (dashboardresource, annotationid, args, requestStatusCallback) {
            var path_params = {
                dashboardresource: dashboardresource,
                annotationid: annotationid
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/catalog/v2beta1/dashboards/", "/annotations/", ""], ["/catalog/v2beta1/dashboards/", "/annotations/", ""])), 'dashboardresource', 'annotationid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the annotation with the specified ID that is associated with the specified dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param annotationid ID of a annotation.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAnnotationOfDataset = function (datasetresource, annotationid, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource,
                annotationid: annotationid
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/annotations/", ""], ["/catalog/v2beta1/datasets/", "/annotations/", ""])), 'datasetresource', 'annotationid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the dashboard with the specified ID or resource name.
         * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDashboard = function (dashboardresource, args, requestStatusCallback) {
            var path_params = {
                dashboardresource: dashboardresource
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/catalog/v2beta1/dashboards/", ""], ["/catalog/v2beta1/dashboards/", ""])), 'dashboardresource')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDataset = function (datasetresource, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/catalog/v2beta1/datasets/", ""], ["/catalog/v2beta1/datasets/", ""])), 'datasetresource')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the field with the specified ID that is part of the specified dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteFieldByIdForDataset = function (datasetresource, fieldid, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/fields/", ""], ["/catalog/v2beta1/datasets/", "/fields/", ""])), 'datasetresource', 'fieldid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
         * @param relationshipid ID of a relationship.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRelationshipById = function (relationshipid, args, requestStatusCallback) {
            var path_params = {
                relationshipid: relationshipid
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/catalog/v2beta1/relationships/", ""], ["/catalog/v2beta1/relationships/", ""])), 'relationshipid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRule = function (ruleresource, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource
            };
            var path = _this.template(templateObject_13 || (templateObject_13 = __makeTemplateObject(["/catalog/v2beta1/rules/", ""], ["/catalog/v2beta1/rules/", ""])), 'ruleresource')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about the action with the specified ID that is associated with the specified rule.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionid ID of an Action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.getActionByIdForRule = function (ruleresource, actionid, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource,
                actionid: actionid
            };
            var path = _this.template(templateObject_14 || (templateObject_14 = __makeTemplateObject(["/catalog/v2beta1/rules/", "/actions/", ""], ["/catalog/v2beta1/rules/", "/actions/", ""])), 'ruleresource', 'actionid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about the dashboard with the specified ID or resource name.
         * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.getDashboard = function (dashboardresource, args, requestStatusCallback) {
            var path_params = {
                dashboardresource: dashboardresource
            };
            var path = _this.template(templateObject_15 || (templateObject_15 = __makeTemplateObject(["/catalog/v2beta1/dashboards/", ""], ["/catalog/v2beta1/dashboards/", ""])), 'dashboardresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DatasetGet
         */
        _this.getDataset = function (datasetresource, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_16 || (templateObject_16 = __makeTemplateObject(["/catalog/v2beta1/datasets/", ""], ["/catalog/v2beta1/datasets/", ""])), 'datasetresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the field with the specified ID.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.getFieldById = function (fieldid, args, requestStatusCallback) {
            var path_params = {
                fieldid: fieldid
            };
            var path = _this.template(templateObject_17 || (templateObject_17 = __makeTemplateObject(["/catalog/v2beta1/fields/", ""], ["/catalog/v2beta1/fields/", ""])), 'fieldid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the field with the specified ID that is part of the specified dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.getFieldByIdForDataset = function (datasetresource, fieldid, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_18 || (templateObject_18 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/fields/", ""], ["/catalog/v2beta1/datasets/", "/fields/", ""])), 'datasetresource', 'fieldid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the relationship with the specified relationship ID.
         * @param relationshipid ID of a relationship.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Relationship
         */
        _this.getRelationshipById = function (relationshipid, args, requestStatusCallback) {
            var path_params = {
                relationshipid: relationshipid
            };
            var path = _this.template(templateObject_19 || (templateObject_19 = __makeTemplateObject(["/catalog/v2beta1/relationships/", ""], ["/catalog/v2beta1/relationships/", ""])), 'relationshipid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about rule with the specified rule ID or resource name.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.getRule = function (ruleresource, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource
            };
            var path = _this.template(templateObject_20 || (templateObject_20 = __makeTemplateObject(["/catalog/v2beta1/rules/", ""], ["/catalog/v2beta1/rules/", ""])), 'ruleresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new dataset import using the ID or resource name of the imported dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetImportedBy
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DatasetImportedBy
         */
        _this.importDataset = function (datasetresource, datasetImportedBy, args, requestStatusCallback) {
            if (!datasetImportedBy) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetImportedBy is empty or undefined" });
            }
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_21 || (templateObject_21 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/importedby"], ["/catalog/v2beta1/datasets/", "/importedby"])), 'datasetresource')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the set of actions that are part of the specified rule.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Action>
         */
        _this.listActionsForRule = function (ruleresource, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource
            };
            var path = _this.template(templateObject_22 || (templateObject_22 = __makeTemplateObject(["/catalog/v2beta1/rules/", "/actions"], ["/catalog/v2beta1/rules/", "/actions"])), 'ruleresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the set of annotations across all objects.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotations = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/annotations";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the set of annotations that are associated with the specified dashboard.
         * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param args parameters to be sent with the request
         * @param args.filter A filter query to apply to the annotations.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotationsForDashboard = function (dashboardresource, args, requestStatusCallback) {
            var path_params = {
                dashboardresource: dashboardresource
            };
            var path = _this.template(templateObject_23 || (templateObject_23 = __makeTemplateObject(["/catalog/v2beta1/dashboards/", "/annotations"], ["/catalog/v2beta1/dashboards/", "/annotations"])), 'dashboardresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the set of annotations that are associated with the specified dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotationsForDataset = function (datasetresource, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_24 || (templateObject_24 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/annotations"], ["/catalog/v2beta1/datasets/", "/annotations"])), 'datasetresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of dashboards.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Dashboard>
         */
        _this.listDashboards = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/dashboards";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all datasets. Use a filter to return a specific list of datasets.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the dataset list. The filter must be a SPL predicate expression.
         * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
         * @param args.offset The number of results to skip before the first result is returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc\".  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<DatasetGet>
         */
        _this.listDatasets = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/datasets";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all of the fields in the Metadata Catalog.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the dataset list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Field>
         */
        _this.listFields = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/fields";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the set of fields for the dataset with the specified ID or resource name.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the dataset list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by. You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Field>
         */
        _this.listFieldsForDataset = function (datasetresource, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_25 || (templateObject_25 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/fields"], ["/catalog/v2beta1/datasets/", "/fields"])), 'datasetresource')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all modules. Use a filter to return a specific list of modules.
         * @param args parameters to be sent with the request
         * @param args.filter A filter to apply to the modules.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Module>
         */
        _this.listModules = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/modules";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all relationships. Use a filter to return a specific list of relationships.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Relationship>
         */
        _this.listRelationships = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/relationships";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of rules that match a filter, if specified, otherwise returns all rules.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Rule>
         */
        _this.listRules = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/rules";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies the action with the specified ID that is associated with the specified rule.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionid ID of an Action.
         * @param actionPATCH The properties to update in the specified action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.updateActionByIdForRule = function (ruleresource, actionid, actionPATCH, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource,
                actionid: actionid
            };
            var path = _this.template(templateObject_26 || (templateObject_26 = __makeTemplateObject(["/catalog/v2beta1/rules/", "/actions/", ""], ["/catalog/v2beta1/rules/", "/actions/", ""])), 'ruleresource', 'actionid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies the dashboard with the specified ID or resource name.
         * @param dashboardresource ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param dashboardPATCH An updated representation of the dashboard to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.updateDashboard = function (dashboardresource, dashboardPATCH, args, requestStatusCallback) {
            var path_params = {
                dashboardresource: dashboardresource
            };
            var path = _this.template(templateObject_27 || (templateObject_27 = __makeTemplateObject(["/catalog/v2beta1/dashboards/", ""], ["/catalog/v2beta1/dashboards/", ""])), 'dashboardresource')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dashboardPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetPATCH An updated representation of the dataset to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.updateDataset = function (datasetresource, datasetPATCH, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource
            };
            var path = _this.template(templateObject_28 || (templateObject_28 = __makeTemplateObject(["/catalog/v2beta1/datasets/", ""], ["/catalog/v2beta1/datasets/", ""])), 'datasetresource')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies the field with the specified ID that is part of the specified dataset.
         * @param datasetresource ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldid ID of a Field.
         * @param fieldPATCH The properties to update in the specified field, or the requesting user lacks catalog.datasets.read permission for them.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.updateFieldByIdForDataset = function (datasetresource, fieldid, fieldPATCH, args, requestStatusCallback) {
            var path_params = {
                datasetresource: datasetresource,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_29 || (templateObject_29 = __makeTemplateObject(["/catalog/v2beta1/datasets/", "/fields/", ""], ["/catalog/v2beta1/datasets/", "/fields/", ""])), 'datasetresource', 'fieldid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), fieldPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies the relationship with the specified relationship ID.
         * @param relationshipid ID of a relationship.
         * @param relationshipPATCH The properties to update in the specified relationship.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Relationship
         */
        _this.updateRelationshipById = function (relationshipid, relationshipPATCH, args, requestStatusCallback) {
            var path_params = {
                relationshipid: relationshipid
            };
            var path = _this.template(templateObject_30 || (templateObject_30 = __makeTemplateObject(["/catalog/v2beta1/relationships/", ""], ["/catalog/v2beta1/relationships/", ""])), 'relationshipid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), relationshipPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies the rule with the specified rule ID or resource name.
         * @param ruleresource The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param rulePATCH The properties to update in the specified rule.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.updateRule = function (ruleresource, rulePATCH, args, requestStatusCallback) {
            var path_params = {
                ruleresource: ruleresource
            };
            var path = _this.template(templateObject_31 || (templateObject_31 = __makeTemplateObject(["/catalog/v2beta1/rules/", ""], ["/catalog/v2beta1/rules/", ""])), 'ruleresource')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), rulePATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedCatalogService.prototype.getServiceCluster = function () {
        return exports.CATALOG_SERVICE_CLUSTER;
    };
    GeneratedCatalogService.prototype.getServicePrefix = function () {
        return exports.CATALOG_SERVICE_PREFIX;
    };
    return GeneratedCatalogService;
}(baseapiservice_1["default"]));
exports.GeneratedCatalogService = GeneratedCatalogService;
exports.CatalogService = catalog_1.CatalogServiceExtensions(GeneratedCatalogService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31;
//# sourceMappingURL=GeneratedApis.js.map