"use strict";
// tslint:disable
/**
 * Copyright 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Splunk Search service
 * Use the Search service in Splunk Cloud Services to dispatch, review, and manage searches and search jobs. You can finalize or cancel jobs, retrieve search results, and request search-related configurations from the Metadata Catalog service in Splunk Cloud Services.
 *
 * OpenAPI spec version: v3alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var search_1 = require("../../../../service_extensions/search");
var client_1 = require("../../../../client");
exports.SEARCH_SERVICE_PREFIX = '/search/v3alpha1';
exports.SEARCH_SERVICE_CLUSTER = 'api';
/**
  * @export
  */
var OutputModeEnum;
(function (OutputModeEnum) {
    OutputModeEnum["Csv"] = "csv";
    OutputModeEnum["Json"] = "json";
})(OutputModeEnum = exports.OutputModeEnum || (exports.OutputModeEnum = {}));
/**
 * Splunk Search service
 * Version: v3alpha1
 * Use the Search service in Splunk Cloud Services to dispatch, review, and manage searches and search jobs. You can finalize or cancel jobs, retrieve search results, and request search-related configurations from the Metadata Catalog service in Splunk Cloud Services.
 */
var GeneratedSearchService = /** @class */ (function (_super) {
    __extends(GeneratedSearchService, _super);
    function GeneratedSearchService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates a dataset.
         * @param datasetPOST
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.createDataset = function (datasetPOST, args, requestStatusCallback) {
            if (!datasetPOST) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetPOST is empty or undefined" });
            }
            var path = "/search/v3alpha1/datasets";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new federated connection with information about how to connect to a remote index.
         * @param federatedConnectionInput
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FederatedConnection
         */
        _this.createFederatedConnection = function (federatedConnectionInput, args, requestStatusCallback) {
            if (!federatedConnectionInput) {
                throw new client_1.SplunkError({ message: "Bad Request: federatedConnectionInput is empty or undefined" });
            }
            var path = "/search/v3alpha1/connections";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), federatedConnectionInput, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a search job.
         * @param searchJob
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchJob
         */
        _this.createJob = function (searchJob, args, requestStatusCallback) {
            if (!searchJob) {
                throw new client_1.SplunkError({ message: "Bad Request: searchJob is empty or undefined" });
            }
            var path = "/search/v3alpha1/jobs";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), searchJob, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a multi-statement module with inter-dependencies between statements.
         * @param searchModule
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchModule
         */
        _this.createSearchStatements = function (searchModule, args, requestStatusCallback) {
            if (!searchModule) {
                throw new client_1.SplunkError({ message: "Bad Request: searchModule is empty or undefined" });
            }
            var path = "/search/v3alpha1/dispatch";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), searchModule, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies/Creates a module with a specified resource name (resourceName).
         * @param resourceName The resource name.
         * @param module
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Module
         */
        _this.createSpl2Module = function (resourceName, module, args, requestStatusCallback) {
            if (!module) {
                throw new client_1.SplunkError({ message: "Bad Request: module is empty or undefined" });
            }
            var path_params = {
                resourceName: resourceName
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/search/v3alpha1/spl2-modules/", ""], ["/search/v3alpha1/spl2-modules/", ""])), 'resourceName')(path_params);
            return _this.client.put(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), module, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a dataset with a specified dataset ID (datasetid).
         * @param datasetid The dataset ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDatasetById = function (datasetid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/search/v3alpha1/datasets/", ""], ["/search/v3alpha1/datasets/", ""])), 'datasetid')(path_params);
            return _this.client["delete"](exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a federated connection with the specified name (connectionName)
         * @param connectionName The name of the federated connection.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteFederatedConnection = function (connectionName, args, requestStatusCallback) {
            var path_params = {
                connectionName: connectionName
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/search/v3alpha1/connections/", ""], ["/search/v3alpha1/connections/", ""])), 'connectionName')(path_params);
            return _this.client["delete"](exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a search job that deletes events from an index. The events are deleted from the index in the specified module, based on the search criteria as specified by the predicate.
         * @param deleteSearchJob
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DeleteSearchJob
         */
        _this.deleteJob = function (deleteSearchJob, args, requestStatusCallback) {
            if (!deleteSearchJob) {
                throw new client_1.SplunkError({ message: "Bad Request: deleteSearchJob is empty or undefined" });
            }
            var path = "/search/v3alpha1/jobs/delete";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), deleteSearchJob, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a module with a specified resource name (resourceName).
         * @param resourceName The resource name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Module
         */
        _this.deleteSpl2ModuleByResourceName = function (resourceName, args, requestStatusCallback) {
            var path_params = {
                resourceName: resourceName
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/search/v3alpha1/spl2-modules/", ""], ["/search/v3alpha1/spl2-modules/", ""])), 'resourceName')(path_params);
            return _this.client["delete"](exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Export the search results for the job with the specified search ID (SID). Export the results as a csv file or json file.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.filename The export results filename. Default: exportResults
         * @param args.outputMode Specifies the format for the returned output.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return { [key: string]: any; }
         */
        _this.exportResults = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/search/v2beta1/jobs/", "/export"], ["/search/v2beta1/jobs/", "/export"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns all federated connections.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListFederatedConnections
         */
        _this.getAllFederatedConnections = function (args, requestStatusCallback) {
            var path = "/search/v3alpha1/connections";
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a dataset with a specified dataset ID (datasetid).
         * @param datasetid The dataset ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.getDatasetById = function (datasetid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/search/v3alpha1/datasets/", ""], ["/search/v3alpha1/datasets/", ""])), 'datasetid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the federated connection with the specified name (connectionName).
         * @param connectionName The name of the federated connection.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FederatedConnection
         */
        _this.getFederatedConnectionByName = function (connectionName, args, requestStatusCallback) {
            var path_params = {
                connectionName: connectionName
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/search/v3alpha1/connections/", ""], ["/search/v3alpha1/connections/", ""])), 'connectionName')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a search job with a specified search ID (sid).
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchJob
         */
        _this.getJob = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/search/v3alpha1/jobs/", ""], ["/search/v3alpha1/jobs/", ""])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a module with a specified resource name (resourceName).
         * @param resourceName The resource name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Module
         */
        _this.getSpl2ModuleByResourceName = function (resourceName, args, requestStatusCallback) {
            var path_params = {
                resourceName: resourceName
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/search/v3alpha1/spl2-modules/", ""], ["/search/v3alpha1/spl2-modules/", ""])), 'resourceName')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all datasets.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListDatasets
         */
        _this.listDatasets = function (args, requestStatusCallback) {
            var path = "/search/v3alpha1/datasets";
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return events summary, for search ID (SID) search.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.earliest The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
         * @param args.field The field to return for the result set. Specify multiple fields of comma-separated values if multiple fields are required.
         * @param args.latest The latest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored. Latest time must be after Earliest time.
         * @param args.offset The index of the first item to return.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListSearchResultsResponse
         */
        _this.listEventsSummary = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/search/v3alpha1/jobs/", "/timeline-metadata/auto/events-summary"], ["/search/v3alpha1/jobs/", "/timeline-metadata/auto/events-summary"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return fields stats summary of the events to-date, for search ID (SID) search.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.earliest The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
         * @param args.latest The latest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored. Latest time must be after Earliest time.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FieldsSummary
         */
        _this.listFieldsSummary = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/search/v3alpha1/jobs/", "/timeline-metadata/auto/fields-summary"], ["/search/v3alpha1/jobs/", "/timeline-metadata/auto/fields-summary"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a matching list of search jobs.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of jobs that you want to return the status entries for.
         * @param args.filter Filter the list of jobs by sid. Valid format is  `sid IN ({comma separated list of SIDs in quotes})`. A maximum of 30 SIDs can be specified in one query.
         * @param args.status Filter the list of jobs by status. Valid status values are 'running', 'done', 'canceled', or 'failed'.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<SearchJob>
         */
        _this.listJobs = function (args, requestStatusCallback) {
            var path = "/search/v3alpha1/jobs";
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the preview search results for the job with the specified search ID (SID). Can be used when a job is running to return interim results.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.offset The index of the first item to return.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListPreviewResultsResponse
         */
        _this.listPreviewResults = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/search/v3alpha1/jobs/", "/results-preview"], ["/search/v3alpha1/jobs/", "/results-preview"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns search results for a job with a specified search ID (sid).
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.field The field to return for the result set. Specify multiple fields of comma-separated values if multiple fields are required.
         * @param args.offset The index of the first item to return.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListSearchResultsResponse
         */
        _this.listResults = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_13 || (templateObject_13 = __makeTemplateObject(["/search/v3alpha1/jobs/", "/results"], ["/search/v3alpha1/jobs/", "/results"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * gets a list of modules.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListModules
         */
        _this.listSpl2Modules = function (args, requestStatusCallback) {
            var path = "/search/v3alpha1/spl2-modules";
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns an event distribution over time of the untransformed events that are read to-date for a job with a specified search ID (sid).
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TimeBucketsSummary
         */
        _this.listTimeBuckets = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_14 || (templateObject_14 = __makeTemplateObject(["/search/v3alpha1/jobs/", "/timeline-metadata/auto/time-buckets"], ["/search/v3alpha1/jobs/", "/timeline-metadata/auto/time-buckets"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates or updates a federated connection with a specified name (connectionName).
         * @param connectionName The name of the federated connection.
         * @param federatedConnectionInput
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FederatedConnection
         */
        _this.putFederatedConnectionByName = function (connectionName, federatedConnectionInput, args, requestStatusCallback) {
            if (!federatedConnectionInput) {
                throw new client_1.SplunkError({ message: "Bad Request: federatedConnectionInput is empty or undefined" });
            }
            var path_params = {
                connectionName: connectionName
            };
            var path = _this.template(templateObject_15 || (templateObject_15 = __makeTemplateObject(["/search/v3alpha1/connections/", ""], ["/search/v3alpha1/connections/", ""])), 'connectionName')(path_params);
            return _this.client.put(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), federatedConnectionInput, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Refresh a federated connection to fetch new remote indexes and add/delete corresponding federated datasets.
         * @param connectionName The name of the federated connection.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.refreshFederatedConnection = function (connectionName, args, requestStatusCallback) {
            var path_params = {
                connectionName: connectionName
            };
            var path = _this.template(templateObject_16 || (templateObject_16 = __makeTemplateObject(["/search/v3alpha1/connections/", "/refresh"], ["/search/v3alpha1/connections/", "/refresh"])), 'connectionName')(path_params);
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Test connection with remote EC instance using federated connection parameters.
         * @param connectionName The name of the federated connection.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.testFederatedConnection = function (connectionName, args, requestStatusCallback) {
            var path_params = {
                connectionName: connectionName
            };
            var path = _this.template(templateObject_17 || (templateObject_17 = __makeTemplateObject(["/search/v3alpha1/connections/", "/test"], ["/search/v3alpha1/connections/", "/test"])), 'connectionName')(path_params);
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies a dataset with a specified dataset ID (datasetid).
         * @param datasetid The dataset ID.
         * @param datasetPATCH
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.updateDatasetById = function (datasetid, datasetPATCH, args, requestStatusCallback) {
            if (!datasetPATCH) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetPATCH is empty or undefined" });
            }
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_18 || (templateObject_18 = __makeTemplateObject(["/search/v3alpha1/datasets/", ""], ["/search/v3alpha1/datasets/", ""])), 'datasetid')(path_params);
            return _this.client.patch(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies a search job with a specified search ID (sid) with an action.
         * @param sid The search ID.
         * @param updateJob
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchJob
         */
        _this.updateJob = function (sid, updateJob, args, requestStatusCallback) {
            if (!updateJob) {
                throw new client_1.SplunkError({ message: "Bad Request: updateJob is empty or undefined" });
            }
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_19 || (templateObject_19 = __makeTemplateObject(["/search/v3alpha1/jobs/", ""], ["/search/v3alpha1/jobs/", ""])), 'sid')(path_params);
            return _this.client.patch(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), updateJob, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedSearchService.prototype.getServiceCluster = function () {
        return exports.SEARCH_SERVICE_CLUSTER;
    };
    GeneratedSearchService.prototype.getServicePrefix = function () {
        return exports.SEARCH_SERVICE_PREFIX;
    };
    return GeneratedSearchService;
}(baseapiservice_1["default"]));
exports.GeneratedSearchService = GeneratedSearchService;
exports.SearchService = search_1.SearchServiceExtensions(GeneratedSearchService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19;
//# sourceMappingURL=GeneratedApis.js.map