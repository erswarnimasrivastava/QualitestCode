/**
 * Copyright 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Data Stream Processing REST API
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 *
 * OpenAPI spec version: v4alpha1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ActivatePipelineRequest, AutopilotActivationDeactivationResponse, ConnectionPatchRequest, ConnectionPutRequest, ConnectionRequest, ConnectionSaveResponse, DeactivatePipelineRequest, DecompileRequest, DecompileResponse, FilesMetaDataResponse, GetInputSchemaRequest, GetOutputSchemaRequest, LookupTableResponse, MetricsResponse, PaginatedResponseOfConnectionResponse, PaginatedResponseOfConnectorResponse, PaginatedResponseOfPipelineResponseV4, PaginatedResponseOfTemplateResponse, Pipeline, PipelinePatchRequest, PipelineRequest, PipelineResponseV4, PreviewData, PreviewSessionStartRequest, PreviewStartResponse, PreviewState, RegistryModel, SplCompileRequest, TemplatePatchRequest, TemplatePutRequest, TemplateRequest, TemplateResponse, UplType, UploadFileResponse, ValidateConnectionRequest, ValidateRequest, ValidateResponse } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { StreamsServiceExtensions } from "../../../../service_extensions/streams";
import { RequestStatus } from '../../../../client';
export declare const STREAMS_SERVICE_PREFIX: string;
export declare const STREAMS_SERVICE_CLUSTER: string;
/**
 * Data Stream Processing REST API
 * Version: v4alpha1.1
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 */
export declare class GeneratedStreamsService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Activates an existing pipeline.
     * @param id Pipeline ID
     * @param activatePipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return AutopilotActivationDeactivationResponse
     */
    activatePipeline: (id: string, activatePipelineRequest: ActivatePipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AutopilotActivationDeactivationResponse>;
    /**
     * Compiles SPL2 and returns streams JSON.
     * @param splCompileRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Pipeline
     */
    compile: (splCompileRequest: SplCompileRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Pipeline>;
    /**
     * Create a new DSP connection.
     * @param connectionRequest Request JSON
     * @param args parameters to be sent with the request
     * @param args.skipValidation Skip validation
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ConnectionSaveResponse
     */
    createConnection: (connectionRequest: ConnectionRequest, args?: {
        [key: string]: any;
        skipValidation?: boolean | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ConnectionSaveResponse>;
    /**
     * Creates a pipeline.
     * @param pipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineResponseV4
     */
    createPipeline: (pipelineRequest: PipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineResponseV4>;
    /**
     * Creates a template for a tenant.
     * @param templateRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    createTemplate: (templateRequest: TemplateRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Deactivates an existing pipeline.
     * @param id Pipeline ID
     * @param deactivatePipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return AutopilotActivationDeactivationResponse
     */
    deactivatePipeline: (id: string, deactivatePipelineRequest: DeactivatePipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AutopilotActivationDeactivationResponse>;
    /**
     * Decompiles UPL and returns SPL.
     * @param decompileRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return DecompileResponse
     */
    decompile: (decompileRequest: DecompileRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DecompileResponse>;
    /**
     * Delete all versions of a connection by its id.
     * @param connectionId Connection ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteConnection: (connectionId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete lookup file.
     * @param fileId File ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteLookupFile: (fileId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a pipeline.
     * @param id Pipeline ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deletePipeline: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a template with a specific ID.
     * @param templateId Template ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteTemplate: (templateId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns the input schema for a function in a pipeline.
     * @param getInputSchemaRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplType
     */
    getInputSchema: (getInputSchemaRequest: GetInputSchemaRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplType>;
    /**
     * Get lookup file metadata.
     * @param fileId File ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UploadFileResponse
     */
    getLookupFileMetadata: (fileId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UploadFileResponse>;
    /**
     * Returns lookup files metadata.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return FilesMetaDataResponse
     */
    getLookupFilesMetadata: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<FilesMetaDataResponse>;
    /**
     * Returns lookup table results.
     * @param connectionId Connection ID
     * @param args parameters to be sent with the request
     * @param args.offset offset
     * @param args.size size
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return LookupTableResponse
     */
    getLookupTable: (connectionId: string, args?: {
        [key: string]: any;
        offset: number;
        size: number;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<LookupTableResponse>;
    /**
     * Returns the output schema for a specified function in a pipeline.
     * @param getOutputSchemaRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return { [key: string]: UplType; }
     */
    getOutputSchema: (getOutputSchemaRequest: GetOutputSchemaRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: UplType;
    }>;
    /**
     * Returns an individual pipeline by version.
     * @param id Pipeline ID
     * @param args parameters to be sent with the request
     * @param args.version version
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineResponseV4
     */
    getPipeline: (id: string, args?: {
        [key: string]: any;
        version?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineResponseV4>;
    /**
     * Returns the latest metrics for a single pipeline.
     * @param id Pipeline ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return MetricsResponse
     */
    getPipelineLatestMetrics: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<MetricsResponse>;
    /**
     * Returns the preview data for a session.
     * @param previewSessionId Preview Session ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PreviewData
     */
    getPreviewData: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PreviewData>;
    /**
     * Returns information from a preview session.
     * @param previewSessionId Preview Session ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PreviewState
     */
    getPreviewSession: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PreviewState>;
    /**
     * Returns the latest metrics for a preview session.
     * @param previewSessionId Preview Session ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return MetricsResponse
     */
    getPreviewSessionLatestMetrics: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<MetricsResponse>;
    /**
     * Returns all functions in JSON format.
     * @param args parameters to be sent with the request
     * @param args.local local
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return RegistryModel
     */
    getRegistry: (args?: {
        [key: string]: any;
        local?: boolean | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<RegistryModel>;
    /**
     * Returns an individual template by version.
     * @param templateId Template ID
     * @param args parameters to be sent with the request
     * @param args.version Template version
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    getTemplate: (templateId: string, args?: {
        [key: string]: any;
        version?: number | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Returns a list of connections (latest versions only) by tenant ID.
     * @param args parameters to be sent with the request
     * @param args.connectorId
     * @param args.createUserId
     * @param args.functionId
     * @param args.functionOp
     * @param args.name
     * @param args.offset
     * @param args.pageSize
     * @param args.showSecretNames
     * @param args.sortDir Specify either ascending ('asc') or descending ('desc') sort order for a given field (sortField), which must be set for sortDir to apply. Defaults to 'asc'.
     * @param args.sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfConnectionResponse
     */
    listConnections: (args?: {
        [key: string]: any;
        connectorId?: string[] | undefined;
        createUserId?: string | undefined;
        functionId?: string | undefined;
        functionOp?: string | undefined;
        name?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        showSecretNames?: string | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfConnectionResponse>;
    /**
     * Returns a list of the available connectors.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfConnectorResponse
     */
    listConnectors: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfConnectorResponse>;
    /**
     * Returns all pipelines.
     * @param args parameters to be sent with the request
     * @param args.activated activated
     * @param args.createUserId createUserId
     * @param args.includeData includeData
     * @param args.includeStatus includeStatus
     * @param args.name name
     * @param args.offset offset
     * @param args.pageSize pageSize
     * @param args.sortDir sortDir
     * @param args.sortField sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfPipelineResponseV4
     */
    listPipelines: (args?: {
        [key: string]: any;
        activated?: boolean | undefined;
        createUserId?: string | undefined;
        includeData?: boolean | undefined;
        includeStatus?: boolean | undefined;
        name?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfPipelineResponseV4>;
    /**
     * Returns a list of all templates.
     * @param args parameters to be sent with the request
     * @param args.createUserId createUserId
     * @param args.offset offset
     * @param args.pageSize pageSize
     * @param args.sortDir sortDir
     * @param args.sortField sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfTemplateResponse
     */
    listTemplates: (args?: {
        [key: string]: any;
        createUserId?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfTemplateResponse>;
    /**
     * Patches an existing pipeline.
     * @param id Pipeline ID
     * @param pipelinePatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    patchPipeline: (id: string, pipelinePatchRequest: PipelinePatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Updates an existing DSP connection.
     * @param connectionId Connection ID
     * @param connectionPutRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ConnectionSaveResponse
     */
    putConnection: (connectionId: string, connectionPutRequest: ConnectionPutRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ConnectionSaveResponse>;
    /**
     * Updates an existing template.
     * @param templateId Template ID
     * @param templatePutRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    putTemplate: (templateId: string, templatePutRequest: TemplatePutRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Creates a preview session for a pipeline.
     * @param previewSessionStartRequest Parameters to start a new Preview session
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PreviewStartResponse
     */
    startPreview: (previewSessionStartRequest: PreviewSessionStartRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PreviewStartResponse>;
    /**
     * Stops a preview session.
     * @param previewSessionId Preview Session ID
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    stopPreview: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Patches an existing DSP connection.
     * @param connectionId Connection ID
     * @param connectionPatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ConnectionSaveResponse
     */
    updateConnection: (connectionId: string, connectionPatchRequest: ConnectionPatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ConnectionSaveResponse>;
    /**
     * Updates an existing pipeline.
     * @param id Pipeline ID
     * @param pipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    updatePipeline: (id: string, pipelineRequest: PipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Patches an existing template.
     * @param templateId Template ID
     * @param templatePatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    updateTemplate: (templateId: string, templatePatchRequest: TemplatePatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Upload new lookup file.
     * @param fileName file to be uploaded
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UploadFileResponse
     */
    uploadLookupFile: (fileName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UploadFileResponse>;
    /**
     * Validates the configuration of a DSP connection.
     * @param validateConnectionRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    validateConnection: (validateConnectionRequest: ValidateConnectionRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Verifies whether the Streams JSON is valid.
     * @param validateRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ValidateResponse
     */
    validatePipeline: (validateRequest: ValidateRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ValidateResponse>;
}
export declare type StreamsService = GeneratedStreamsService & StreamsServiceExtensions;
export declare const StreamsService: typeof GeneratedStreamsService;
